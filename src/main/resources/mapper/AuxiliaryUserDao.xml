<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!-- namespace：命名空间，用于隔离sql，还有一个很重要的作用，后面会讲 -->
<mapper namespace="com.haoge.shijie.dao.AuxiliaryUserDao">

    <!--
        动态代理的开发规范
            1: 映射文件的namespace必须等于接口的全路径名称
            2: 映射文件的sql唯一标示,必须等于接口的方法名称
            3: 映射文件的parameterType必须等于接口方法的参数类型
            4: 映射文件resultType必须等于接口方法的返回类型
     -->
    <!--sql多个查询-->
    <select id="queryAuxiliaryUserList" resultType="com.haoge.shijie.pojo.AuxiliaryUserBean">
        SELECT
          *
        FROM
          Tb_auxiliary_user
    </select>
    <select id="queryAuxiliaryUserById" resultType="com.haoge.shijie.pojo.AuxiliaryUserBean">
        SELECT
        *
        FROM
        Tb_auxiliary_user u
        WHERE u.user_id=#{userId}
    </select>
    <select id="queryAuxUserByCode" resultType="com.haoge.shijie.pojo.AuxiliaryUserBean">
        SELECT
        *
        FROM
        Tb_auxiliary_user u
        WHERE u.user_code=#{userCode}
    </select>
    <insert id="insertAuxiliaryUser" useGeneratedKeys="true" keyProperty="Id"
            keyColumn="id" parameterType="com.haoge.shijie.pojo.AuxiliaryUserBean">
        INSERT INTO
        Tb_auxiliary_user(user_id,user_role,user_code,code,user_permission,user_token)
        VALUES(#{userId},#{userRole},#{userCode},#{code},#{userPermission},#{userToken})
    </insert>
    <update id="updateAuxiliaryUser" parameterType="com.haoge.shijie.pojo.AuxiliaryUserBean">
        UPDATE Tb_auxiliary_user
        <set>
            <if test="userRole!=null">user_role=#{userRole},</if>
            user_code=#{userCode},
            code=#{code},
            user_permission=#{userPermission},
            user_token=#{userToken}
        </set>
        WHERE user_id=#{userId}
    </update>
    <delete id="deleteAuxiliaryUser">
        DELETE FROM Tb_auxiliary_user
        WHERE user_id=#{userId}
    </delete>

</mapper>